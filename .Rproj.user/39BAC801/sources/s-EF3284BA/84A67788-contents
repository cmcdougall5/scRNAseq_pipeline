# scRNAseq data analysis

############## precursor, set the directories to save to and read data from:

#set the working directory to directory wish to save analysis results to
setwd("/Users/craigmcdougall/Documents/Project 2/Data analysis/Cheung")

#check working directory
getwd()


#define the data directory where the data is held
data.dir <- "/Users/craigmcdougall/Documents/Project 2/Data/Cheung"

#list all the files in the data directory: barcodes, genes, matrix
list.files(data.dir)
#have now seen that the files are there

############################# 1. Load libraries
#libraries required throughought the script
library(dplyr)
library(Seurat)
library(patchwork)
library(sctransform)
library(ggplot2)

############################ 2. Load the data  

#load raw data using Read10x 
raw.data <- Read10X(data.dir=data.dir)

#initialise a Seurat object with the raw (not normalised) data. This is a count matrix
data <- CreateSeuratObject(counts=raw.data, project = "data", min.cells = 3, min.features = 200) 

######################### 3. Pre-processing quality control

#QC: selecting cells for analysis
  #- # genes per cell (id low quality cells or multiple reads)
  #- total # molecules in a cell
  #- % of reads that map to mitochondrial genome

#Seurat recommends MT- prefix for mitochondria data
#cheung, ho, mayran use mt
data <- PercentageFeatureSet(data, pattern = "^mt-", col.name = "percent.mt")
#Fletcher uses Mt-
#data <- PercentageFeatureSet(data, pattern = "^mt-", col.name = "percent.MT")

#use QC metrics to filter the cells
#visualise the QC metrics - use a violin plot 
VlnPlot(data, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)

#make the plots
plot1 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(data, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
#then plot
plot1 + plot2

############################4. Apply SCTransform normalisation (Filter, normalise, regress & detect variable genes)
#SCTransform replaces Normalizedata, ScaleData and FindVariableFeature functions in older revisions of script

#use QC plots to inform which cells should be excluded below
#SCTransform parameters:
  #Filter out cells which have less than this many genes expressed [200]
  #Filter out cells which have higher unique gene count [2500]
  #Filter out cells which have higher mitochondrial transcript percentage [5]
  #Regress out cell cycle differences [no]
  #Number of variable features to return [3000]

#use subset function to do this if not happy with the SCTransform defaults
#data <- subset(data, subset = nFeature_RNA > 200 & nFeature_RNA <4000 & percent.mt < 5)

data <- SCTransform(data,vars.to.regress = "percent.mt", verbose = FALSE )


##################### 5. Dimensional reduction 

#PCA to identify PCs
#run PCA following new Seurat standard steps:https://satijalab.org/seurat/v3.1/sctransform_vignette.html
data <- RunPCA(data,verbose= FALSE) 

#UMAP dimensional reduction of the identified PCs
data <- RunUMAP(data, dims=1:30, umap.method = "umap-learn", metric = "correlation", verbose=False) #note because SCTransform passes 3000 features can run more PCs


#################### 6. Clustering
#Find nearest neighbours
data <- FindNeighbors(data, dims=1:30, verbose=FALSE)

#CLuster based on neighbour distances
data <- FindClusters(data, verbose=FALSE)

#plot the clusters
DimPlot(data, label=TRUE) + NoLegend()

#Visualise the canonical marker genes 
FeaturePlot(data, features = c("Pou1f1", "Gh","Prl","Pomc","Pax7", "Lhb","Tshb", "Pcsk2"), pt.size = 0.2)+ scale_color_viridis_c() 



# can put names on the featureplot 
#enter the cotricoph cell ids, found in visualisation. Note change to correct cluster #s or will missmatch
new.cluster.ids <- c("0", "1", "2", "3", "4", "cort", "6","7")
 
names(new.cluster.ids) <- levels(data)
 
data <- RenameIdents(data, new.cluster.ids)
#then put on the plot to confirm slected the correct one (sanity check)
DimPlot(data, reduction ="umap", label = TRUE, pt.size = 0.5)+NoLegend()

####################### 7. pull out the corticotrophs
#extract the expression matrix for cort only
#cort.raw.data <- as.matrix(GetAssayData(data, slot = "counts")[, WhichCells(data, ident = "cort")])

#or pull out a  seurat of cort only
cortico <- subset(data, idents = "cort")

##################### 8. Recluster the corticotrophs only

#dimensional analysis
#PCA to identify PCs
#run PCA following new Seurat standard steps:https://satijalab.org/seurat/v3.1/sctransform_vignette.html
cortico <- RunPCA(cortico,verbose= FALSE) 

#dimensional reduction
#UMAP dimensional reduction of the identified PCs
cortico <- RunUMAP(cortico, dims=1:30, verbose=False) #note because SCTransform passes 3000 features can run more PCs

#Find nearest neighbours
cortico <- FindNeighbours(cortico, dims=1:30, verbose=FALSE)

#CLuster based on neighbour distances
cortico <- FindClusters(cortico, verbose=FALSE)

#plot the clusters
DimPlot(cortico, label=TRUE) + NoLegend()

#Visualise the canonical marker genes 
FeaturePlot(data, features = c("Pomc"), pt.size = 0.2)+ scale_color_viridis_c() 


#examine top 2 differentially expressed genes in each corticotroph cluster
cortico.markers %>% group_by(cluster) %>% top_n(n=2, wt= avg_logFC)





